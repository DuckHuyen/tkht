<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        kS8dExQUExMTExMTFhQUFBQUFBQUFhQUEyoINAIAAAI1np+boJ+homKBAH81AmoAAlcbJyocHCcnHBwq
        ExYUFBYWFBQUFBQUExw2BQIAAhoZNoqam5yaNQBqOyRrAIGBAGoiNjZgGyOSnQ8hKhYWFBMWFBQUFhQU
        FhMqBjsCApMflB5MlZZhl2sAjnsLgYEugQsDgpiTBC1sYgOMmRwTFhMWFBQUFBQUFhMcH5MCABkeFBUc
        GHEFAAtwBQuBLi4uLmoCDX8CAgICAAKRkhYVFBQUFBQUFBQUFBQVHhkKAw8qFBMTHBQvjnuMjwCBgS4u
        AAAALgggkCCRkTVpV4OIFRQUFBYUFBQUFBQTHA8DCRscExQUExYnEYSFC4EKgYEAO2ElAhqLBYwZjXsK
        AnwwJxMUFBQUFBQUFBQTHRsJBREqFBQUFBQTKioGfAuBCi4AV3xXAwIliUREeFokaCCKMSoUFBQUFBQU
        FBQUKhEFCBIVFBQUFBQTExyAGQsugQIEggSDhAAChYZJSUlvh3F7aYgqFBYWFhQUFBQUFRcICBMWFBQU
        FBQWFhMcOXsLABppA3xhPDB9InRGZmZeSVp+fyMdExYTExQUFBQUFBMICBUUFBQUFBQTFhMqMVgAC3V2
        AmN3c3g8b1F5SEpmZl5yehcVExYWFhQUFBQUFBUIDhUUFBQUFBQWFhMTJ0xwAmJxYXJWRkZzdEJVQUZe
        dEk9TB0TFhMWExQUFBQUFBUODhUUFBQUFBQUFBQUFRckawJsbW5GSUpGQF1kPFtGZl5vBxQWFhMWFhQU
        FBQUFBUOCBUUFBQUFBQUFBYUExxoaWoCLUdFSUtJRU9UQkBGU2ZmUmcVFhYTFhQUFBQUFBUICBMWFBQU
        FBYUFBQUFBMcYGFiY2RFSUlLUUJcZUZJSWZeUmcVExYWFhQUFBQUFRQIWBIVFBQUFBQUFBQUFBYTHDFN
        WVpFSUlGW1xdUVNLSV5fBxMWFhMWExQUFBQUFRcIBREqFBQUFBQUFBQUFBQWExYdHlJTS0tLSlRVVFZJ
        Skk9TBwTFBQUFBQUFBQUHDdXCRAdExQUFBQUFBQUFBQWFBMTHE1OSEpLRk9QUUZJSUlCESoTFBQUFBQU
        FBQTHBAJAw8qExQUFBQUFBQUFhQUFBQUFhMkQEhJSklGS0lJRUdMHBQUFBQUFBQUFBQTHA8DABkeFRQU
        FBQUFhQUFBQUFBQUEyoxQ0RFRUZGRkVGRwYVFBQUFBQUFBQUFBQWHhkAAg0bHRMUFBQUFBQUFhQUFBQU
        FBMqFxk8PT4/QEFCOBUVFBQUFhQUFBQUFBMcHygCCwwGKhMUFBQUFBQUFBQUFBQUFBYTFRw3ODkODzom
        HBYTFBQUFBQUFBQUFBMqBjsCAAI1IRwUFBQUFBQUFBQUFBQUFBQWFBQqJyoqHCcVExYUFBQUFBQUFhQU
        Exw2BQIAAAIaCBUUFBQUFBQUFBQUFBQUFBQUFBMqMhAzMhAVFhYUFBQUFBQUFBQUFCoINAIAAAACICMd
        ExQUFBQUFBQWFBYUFhQUFBQVLx4wGCwxFRQWFBQUFBQUFBMTHRAgAgAAAAABCiImKhQUFBQUFBQUFBQU
        FBQUFBQTFRUeFBMTFBQUFBQUFBQUFhMqJiIKAAAAAAAKAgMiFRQUFBQUFBQUFBQUFBQUFBQWFBQVFBQU
        FBQUFBQUFBQWExUVIgMCAAAAAQABAAIlKRwUFBQUFBQUFBQUFBQUFBQWFBQUFBQUFBQUFBQUFBYTFhwO
        LQIuAAAAAAAAAAACKCscFBQUFBQUFBQUFBQUFBQUFBYUFhQUFBQUFBQUFBQVHCwoAgoAAAAAAAAAAAAA
        AigpFSoTFBQVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCoVBigCAAAAAAEAAQAAAAEAAAIlIiYdFBMUFBQU
        FBQUFBQUFBQUFBQUFBQUFBMUJyYiJQIAAAABAAAAAAAAAAAAAAACAyIQFRwUExQUFBQUFBQUFBQUFBYU
        FBQUFBwVIyQDAgAAAQAAAAEAAAABAAABAAAAAgogCCEVHRUTExQUFBQUFBQUFBQUFBYdFSEIIAoCCgAA
        AAEAAAEAAAAAAAAAAQAACgECGgUGGxccHRwVFhQUFBQWFRUdHB4fBgUaAgEAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAACwIMDQ4PEBESExQVFRYTFxgQDxkNDAICCgAAAAAAAAABAAAAAAAAAQABAAAAAAEAAAACAgAD
        BAUGBwgGBggICAUJAwACAgoAAAAAAQAAAQAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>